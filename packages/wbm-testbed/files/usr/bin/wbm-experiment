#!/usr/bin/lua

local crc = require "crc16"
local uci = require "uci"
local util = require "util"
local argv = arg
local x = uci.cursor()

local function neigh_batadv()
	local c = io.popen("batctl o")
	local s = assert(x:get("wbm", "wireless", "ssid"))

	c:read("*l")
	c:read("*l")

	local l
	while true do
		l = c:read("*l")
		if not l then
			break
		end

		local q, a, i = l:match("^%S+ +%S+ +%((%d+)%) +(%S+) +%[ -(%S+)%]")
		if not (q and a and i) then
			break
		end

		local id = crc.hash(a)
		return util.sprintf("%17s	%6.2f%%	%8s	%s-%04x",			a, q / 255 * 100, i, s, id)
	end
end

function orig_bmx6()
	local nodes = util.lines(
		util.exec('bmx6 -c --originators | awk \'{print  $3}\' | grep -e ".*:.*:"'))
	return nodes
end

function neigh_bmx6()
	local nodes = util.lines(util.exec(
		'bmx6 -c --links | awk \'{print $2}\' |  grep -e ".*:.*:"'))
	return nodes
end

function neigh_olsr6()
	local nodes = util.lines(util.exec(
		'wget http://[::1]:2006/neigh -O - 2>/dev/null'))
	return nodes
end

function links_olsr6()
	local links = util.lines(util.exec(
		'wget http://[::1]:2006/links -O - 2>/dev/null'))
	return links
end

function routes_olsr6()
	local routes = util.lines(util.exec(
		'wget http://[::1]:2006/route -O - 2>/dev/null'))
	return routes
end


-- EXPERIMENTS
 
local function list_neighbours(proto)
	local neighbours = {}
	if proto == "batadv" then neighbours = neigh_batadv() end
	if proto == "bmx6" then neighbours = neigh_bmx6() end
	if proto == "olsr" then neighbours = neigh_olsr6() end
	util.printable(neighbours)	
end

local function list_nodes(proto)
	local nodes = {}
	if proto == "batadv" then nodes = orig_batadv() end
	if proto == "bmx6" then nodes = orig_bmx6() end
	if proto == "olsr" then nodes = routes_olsr6() end
	util.printable(nodes)	
end

local function list_links(proto)
	local links = {}
	if proto == "olsr" then links = links_olsr6() end
	if proto == "bmx6" then links = neigh_bmx6() end
	util.printable(links)
end

local function traceroute(dest)
	print(util.exec('mtr ' .. dest .. ' --report-cycles=3 --raw'))
end

local function ping6(dest, interface)
	print(util.exec('ping6 -c 3 ' .. dest .. ' -I ' .. interface))
end

local function top()
	print(util.exec('top -b -n 1'))
end

local function help()
	print("\tneigh\n\tnodes\n\tlinks\n\n\ttrace\n\tping6\n\ttop")
end

-- MAIN

local function main()
	if argv[1] == "list" then
	  if argv[2] == "neighbours" or argv[2] == "neigh" then list_neighbours(argv[3]) end
	  if argv[2] == "nodes" then list_nodes(argv[3]) end
	  if argv[2] == "links" then list_links(argv[3]) end
	end

	if argv[1] == "trace" then traceroute(argv[2]) end
	if argv[1] == "ping6" then ping6(argv[2], argv[3]) end
	if argv[1] == "top" then top() end

	if argv[1] == "help" or argv[1] == "" then help() end		

end

main()

