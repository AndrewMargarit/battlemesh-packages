#!/usr/bin/lua

local crc = require "crc16"
local uci = require "uci"
local argv = arg
local x = uci.cursor()

local function sprintf(...)
	return string.format(...)
end

local function printf(...)
	print(sprintf(...))
end

local function neigh_batadv()
	local c = io.popen("batctl o")
	local s = assert(x:get("wbm", "wireless", "ssid"))

	c:read("*l")
	c:read("*l")

	local l
	while true do
		l = c:read("*l")
		if not l then
			break
		end

		local q, a, i = l:match("^%S+ +%S+ +%((%d+)%) +(%S+) +%[ -(%S+)%]")
		if not (q and a and i) then
			break
		end

		local id = crc.hash(a)
		return sprintf("%17s	%6.2f%%	%8s	%s-%04x",
			a, q / 255 * 100, i, s, id)
	end
end

local function list_neighbours(proto)
	if proto == "batadv" then print(neigh_batadv()) end
end

local function throughput_test(ipaddr)
   if ipaddr then
	  appendLog(netPerf(ipaddr))
   else
	  print(Please supply an ip address)
   end
end

local function netPerf(ipaddr)
   -- Runs an netperf client aimed at the supplied IP address and returns the raw throughput @ 10^6bits/sec (kilobits per second)
   local throughput = luci.sys.exec("netperf -v 0 -f k -H "..ipaddr)

   --Need to check to make sure output is correct and if not print error
   --if throughput ==  then
--	  return throughput
--   end

end

function string:split(sep)
   --Adding functionality to lua's string function to handle spliting CSV's
   local sep, fields = sep or ":", {}
   local pattern = string.format("([^%s]+)", sep)
   self:gsub(pattern, function(c) fields[#fields+1] = c end)
   return fields
end

function append_log(data)
   testLog = io.open("/tmp/wbm06Test.log", "a")
   testLog:write(data)
   testLog:close()
end

local function main()
	if argv[1] == "list" then
	   if argv[2] == "neighbours" then list_neighbours(argv[3]) end
	else if argv[1] == "throughput" then throughput_test(argv[2]) end
	end
end

main()

